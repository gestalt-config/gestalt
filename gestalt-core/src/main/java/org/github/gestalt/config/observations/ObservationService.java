package org.github.gestalt.config.observations;

import org.github.gestalt.config.reflect.TypeCapture;
import org.github.gestalt.config.tag.Tags;
import org.github.gestalt.config.utils.GResultOf;

import java.util.List;

/**
 * Holds all the ObservationRecorders and when there is an observation it will ensure all ObservationRecorders are notified.
 *
 * @author <a href="mailto:colin.redmond@outlook.com"> Colin Redmond </a> (c) 2025.
 */
public interface ObservationService {
    /**
     * Add a single ObservationRecorder. All observations are sent to all the ObservationRecorder added
     *
     * @param recorder a single ObservationRecorder.
     */
    void addObservationRecorder(ObservationRecorder recorder);

    /**
     * Add a list of ObservationRecorder. All observations are sent to all the ObservationRecorder added
     *
     * @param recorder a list of ObservationRecorder.
     */
    void addObservationRecorders(List<ObservationRecorder> recorder);

    /**
     * Called when we start to get a configuration.
     *
     * @param path the path that we are attempting to get
     * @param klass the klass we are attempting to get
     * @param tags any tags associated with the request
     * @param isOptional If this is an an optional or default request
     * @return a marker that can be passed into the finalizeGetConfig method.
     * @param <T> type of object we are getting.
     */
    <T> ObservationMarker startGetConfig(String path, TypeCapture<T> klass, Tags tags, boolean isOptional);

    /**
     * Called after we have finished getting a configuration.
     *
     * @param markers  marker generated by startGetConfig that we want to complete
     * @param tags any tags for the result, such as if there were errors.
     */
    void finalizeGetConfig(ObservationMarker markers, Tags tags);

    /**
     * Start an observation that has a defined beginning and ending.
     *
     * @param metric The name of the metric to start
     * @param tags Any associated tags.
     * @return return a marker that can be passed into the finalizeObservation method.
     */
    ObservationMarker startObservation(String metric, Tags tags);

    /**
     * After calling startObservation and receiving a ObservationMarker, do your work then call finalizeObservation.
     *
     * @param markers marker generated by startObservation that we want to complete
     * @param tags any tags for the result, such as if there were errors.
     */
    void finalizeObservation(ObservationMarker markers, Tags tags);

    /**
     * Record a generic observation.
     *
     * @param observation Name of the observation to record
     * @param count  the count to add to the observation
     * @param tags   tags associated with the metrics
     */
    void recordObservation(String observation, double count, Tags tags);

    /**
     * Record the observation for a result.
     *
     * @param results the results of the request
     * @param path the path for the request
     * @param klass the type of object requested
     * @param tags the tags associated with the request
     * @param isOptional if the request result os option (ie an Optional or has a default value)
     * @param <T> generic type of config
     */
    <T> void recordObservation(GResultOf<T> results, String path, TypeCapture<T> klass, Tags tags, boolean isOptional);
}
